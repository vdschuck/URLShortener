# top-most EditorConfig file
root = true

[*]
indent_style             = space
indent_size              = 4
end_of_line              = lf
charset                  = utf-8
trim_trailing_whitespace = true
insert_final_newline     = true

[*.cs]
indent_size                                                        = 4
end_of_line                                                        = crlf

# Namespace declaration preferences
csharp_style_namespace_declarations                                = file_scoped : silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers                       = always : warning
csharp_preferred_modifier_order                                    = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async : warning

# Inlined variable declarations
csharp_style_inlined_variable_declaration                          = true : warning

# Expression-level preferences
csharp_prefer_simple_default_expression                            = true : warning
csharp_style_deconstructed_variable_declaration                    = true : warning
csharp_style_pattern_local_over_anonymous_function                 = true : warning

# Code-style rule options
dotnet_style_allow_multiple_blank_lines_experimental               = false : warning

# Code block preferences
csharp_prefer_braces                                               = true : warning

# Organize usings
dotnet_sort_system_directives_first                                = true

# C# formatting settings
csharp_new_line_before_open_brace                                  = all
csharp_new_line_before_else                                        = true
csharp_new_line_before_catch                                       = true
csharp_new_line_before_finally                                     = true
csharp_new_line_before_members_in_object_initializers              = true
csharp_new_line_before_members_in_anonymous_types                  = true
csharp_new_line_between_query_expression_clauses                   = true

# Style Definitions
dotnet_naming_style.pascal_case_style.capitalization               = pascal_case
dotnet_naming_style.camel_case_style.capitalization                = camel_case
dotnet_naming_style.I_prefix_style.required_prefix                 = I
dotnet_naming_style.I_prefix_style.capitalization                  = pascal_case

# Use PascalCase for constant fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity  = warning
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols   = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style     = pascal_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds             = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities   = *
dotnet_naming_symbols.constant_fields.required_modifiers           = const

# Use PascalCase for public fields
dotnet_naming_rule.pascal_case_for_public_fields.severity          = warning
dotnet_naming_rule.pascal_case_for_public_fields.symbols           = public_fields
dotnet_naming_rule.pascal_case_for_public_fields.style             = pascal_case_style
dotnet_naming_symbols.public_fields.applicable_kinds               = field
dotnet_naming_symbols.public_fields.applicable_accessibilities     = public

# Use Underscore prefix for private fields
dotnet_naming_rule.private_members_with_underscore.symbols         = private_fields
dotnet_naming_rule.private_members_with_underscore.style           = prefix_underscore
dotnet_naming_rule.private_members_with_underscore.severity        = warning
dotnet_naming_symbols.private_fields.applicable_kinds              = field
dotnet_naming_symbols.private_fields.applicable_accessibilities    = private
dotnet_naming_style.prefix_underscore.capitalization               = camel_case
dotnet_naming_style.prefix_underscore.required_prefix              = _

# Interfaces must be PascalCase and have an I prefix
dotnet_naming_rule.interfaces_start_with_I.severity                = warning
dotnet_naming_rule.interfaces_start_with_I.symbols                 = any_interface
dotnet_naming_rule.interfaces_start_with_I.style                   = I_prefix_style
dotnet_naming_symbols.any_interface.applicable_accessibilities     = *
dotnet_naming_symbols.any_interface.applicable_kinds               = interface

# Classes, structs, methods, enums, events, properties, namespaces, delegates must be PascalCase
dotnet_naming_rule.general_naming.severity                         = warning
dotnet_naming_rule.general_naming.symbols                          = general
dotnet_naming_rule.general_naming.style                            = pascal_case_style
dotnet_naming_symbols.general.applicable_kinds                     = class,struct,enum,property,method,event,namespace,delegate
dotnet_naming_symbols.general.applicable_accessibilities           = *

# Everything else is camelCase
dotnet_naming_rule.everything_else_naming.severity                 = warning
dotnet_naming_rule.everything_else_naming.symbols                  = everything_else
dotnet_naming_rule.everything_else_naming.style                    = camel_case_style
dotnet_naming_symbols.everything_else.applicable_kinds             = *
dotnet_naming_symbols.everything_else.applicable_accessibilities   = *
